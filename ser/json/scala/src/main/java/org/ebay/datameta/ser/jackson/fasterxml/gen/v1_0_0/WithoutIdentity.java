package org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0;


import org.ebay.datameta.dom.Verifiable;
import java.util.Objects;
import java.util.StringJoiner;
import org.ebay.datameta.dom.VerificationException;
import org.ebay.datameta.util.jdk.SemanticVersion;
import static org.ebay.datameta.dom.CannedRegexUtil.getCannedRegEx;

/**

 * This class is generated by
 * <a href='https://github.com/eBayDataMeta/DataMeta'>DataMeta</a>.
 */
public class WithoutIdentity implements Verifiable {

    public static final SemanticVersion VERSION = SemanticVersion.parse("1.0.0");



    private Integer a;
    private Long b;

    public void setA(final Integer newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'a' on the class org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0.WithoutIdentity.");
        this.a = newValue;
    }

    public Integer getA() {return this.a; }
    public void setB(final Long newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'b' on the class org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0.WithoutIdentity.");
        this.b = newValue;
    }

    public Long getB() {return this.b; }

    /**
    * If there is class type mismatch, somehow we are comparing apples to oranges, this is an error, not
    * a not-equal condition.
    */
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass") @Override public boolean equals(Object other) {
        return Objects.deepEquals(new Object[]{this.a, this.b},
          new Object[]{((WithoutIdentity) other).a, ((WithoutIdentity) other).b});
    }

    @Override public int hashCode() {// null - safe: result = 31 * result + (element == null ? 0 : element.hashCode());
        return Objects.hash(this.a, this.b);
    }

    public void verify() {

        StringJoiner missingFields = new StringJoiner(", ");
        if(a == null) missingFields.add("a");
        if(b == null) missingFields.add("b");
        if(missingFields.length() != 0) throw new VerificationException(getClass().getSimpleName() + ": required fields not set: " + missingFields);




    }

    public final SemanticVersion getVersion() { return VERSION; }
}
