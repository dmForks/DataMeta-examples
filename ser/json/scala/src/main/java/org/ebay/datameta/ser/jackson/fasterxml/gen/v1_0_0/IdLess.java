package org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0;
import java.time.ZonedDateTime;

import org.ebay.datameta.dom.Verifiable;
import java.util.Objects;
import java.util.StringJoiner;
import org.ebay.datameta.dom.VerificationException;
import org.ebay.datameta.util.jdk.SemanticVersion;
import static org.ebay.datameta.dom.CannedRegexUtil.getCannedRegEx;

/**

 * This class is generated by
 * <a href='https://github.com/eBayDataMeta/DataMeta'>DataMeta</a>.
 */
public class IdLess implements Verifiable {

    public static final SemanticVersion VERSION = SemanticVersion.parse("1.0.0");



    private Integer count;
    private String name;
    private ZonedDateTime when;

    public void setCount(final Integer newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'count' on the class org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0.IdLess.");
        this.count = newValue;
    }

    public Integer getCount() {return this.count; }

    public void setName(final String newValue) {this.name = newValue; }

    public String getName() {return this.name; }
    public void setWhen(final ZonedDateTime newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'when' on the class org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0.IdLess.");
        this.when = newValue;
    }

    public ZonedDateTime getWhen() {return this.when; }

    /**
    * If there is class type mismatch, somehow we are comparing apples to oranges, this is an error, not
    * a not-equal condition.
    */
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass") @Override public boolean equals(Object other) {
        return Objects.deepEquals(new Object[]{this.count, this.name, this.when},
          new Object[]{((IdLess) other).count, ((IdLess) other).name, ((IdLess) other).when});
    }

    @Override public int hashCode() {// null - safe: result = 31 * result + (element == null ? 0 : element.hashCode());
        return Objects.hash(this.count, this.name, this.when);
    }

    public void verify() {

        StringJoiner missingFields = new StringJoiner(", ");
        if(count == null) missingFields.add("count");
        if(when == null) missingFields.add("when");
        if(missingFields.length() != 0) throw new VerificationException(getClass().getSimpleName() + ": required fields not set: " + missingFields);




    }

    public final SemanticVersion getVersion() { return VERSION; }
}
