package org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0;


import org.ebay.datameta.dom.Verifiable;
import java.util.Objects;
import java.util.StringJoiner;
import org.ebay.datameta.dom.VerificationException;
import org.ebay.datameta.util.jdk.SemanticVersion;
import static org.ebay.datameta.dom.CannedRegexUtil.getCannedRegEx;

/**
Going deep to the point <tt>A</tt>,
And next to the point <tt>B</tt>.

 * This class is generated by
 * <a href='https://github.com/eBayDataMeta/DataMeta'>DataMeta</a>.
 */
public class EmbeddedType implements Verifiable {

    public static final SemanticVersion VERSION = SemanticVersion.parse("1.0.0");



    private Integer intCode;
    private String txtCode;
    private Embodiment embo;

    public void setIntCode(final Integer newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'intCode' on the class org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0.EmbeddedType.");
        this.intCode = newValue;
    }

    public Integer getIntCode() {return this.intCode; }
    public void setTxtCode(final String newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'txtCode' on the class org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0.EmbeddedType.");
        this.txtCode = newValue;
    }

    public String getTxtCode() {return this.txtCode; }

    public void setEmbo(final Embodiment newValue) {this.embo = newValue; }

    public Embodiment getEmbo() {return this.embo; }

    /**
    * If there is class type mismatch, somehow we are comparing apples to oranges, this is an error, not
    * a not-equal condition.
    */
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass") @Override public boolean equals(Object other) {
        return Objects.deepEquals(new Object[]{this.intCode},
          new Object[]{((EmbeddedType) other).intCode});
    }

    @Override public int hashCode() {// null - safe: result = 31 * result + (element == null ? 0 : element.hashCode());
        return Objects.hash(this.intCode);
    }

    public void verify() {

        StringJoiner missingFields = new StringJoiner(", ");
        if(intCode == null) missingFields.add("intCode");
        if(txtCode == null) missingFields.add("txtCode");
        if(missingFields.length() != 0) throw new VerificationException(getClass().getSimpleName() + ": required fields not set: " + missingFields);



        if(embo != null) embo.verify();

    }

    public final SemanticVersion getVersion() { return VERSION; }
}
