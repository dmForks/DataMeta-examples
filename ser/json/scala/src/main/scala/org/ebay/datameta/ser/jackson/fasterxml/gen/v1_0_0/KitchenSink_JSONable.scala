package org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0

import org.ebay.datameta.ser.jackson.fasterxml.JacksonUtil._
import org.ebay.datameta.ser.jackson.fasterxml.Jsonable
import com.fasterxml.jackson.core.{JsonFactory, JsonGenerator, JsonParser, JsonToken}
import com.fasterxml.jackson.core.JsonToken.{END_ARRAY, END_OBJECT}

/**

 * This class is generated by
 * <a href='https://github.com/eBayDataMeta/DataMeta'>DataMeta</a>.
 */
object KitchenSink_JSONable extends Jsonable[KitchenSink] {

  override def write(out: JsonGenerator, value: KitchenSink) {
    value.verify()

    if(value.getAltered != null) writeDttmFld("altered", out, value.getAltered)
    if(value.getAmplitude != null) out.writeNumberField("amplitude", value.getAmplitude)
    if(value.getBearing != null) out.writeNumberField("bearing", value.getBearing)
    writeByteArrayFld("bytes", out, value.getBytes)
    if(value.getChoices != null) writeBitSetFld("choices", out, value.getChoices)
    out.writeStringField("code", value.getCode)
    if(value.getColor != null) out.writeStringField("color", value.getColor.name())
    out.writeStringField("comments", value.getComments)
    out.writeStringField("context", value.getContext)
    if(value.getCreated != null) writeDttmFld("created", out, value.getCreated)
    if(value.getDiameter != null) out.writeNumberField("diameter", value.getDiameter)
    if(value.getEmb != null) EmbeddedType_JSONable.writeField("emb", out, value.getEmb)
    writeCollectionFld("embeds", out, value.getEmbeds, EmbeddedType_JSONable)
    Embodiment_JSONable.writeField("embo", out, value.getEmbo)
    if(value.getFieldName != null) out.writeNumberField("fieldName", value.getFieldName)
    out.writeNumberField("frequency", value.getFrequency)
    out.writeStringField("homeEmail", value.getHomeEmail)
    out.writeStringField("homePage", value.getHomePage.toExternalForm)
    out.writeStringField("homeZip", value.getHomeZip)
    out.writeNumberField("id", value.getId)
    writeCollectionFld("idLessNess", out, value.getIdLessNess, IdLess_JSONable)
    writeLinkedListInteger("ints", out, value.getInts)
    if(value.getIsMeasurable != null) out.writeBooleanField("isMeasurable", value.getIsMeasurable)
    out.writeBooleanField("isRequired", value.getIsRequired)
    if(value.getLastFirstName != null) out.writeStringField("lastFirstName", value.getLastFirstName)
    out.writeNumberField("length", value.getLength)
    if(value.getMobilePhone != null) out.writeStringField("mobilePhone", value.getMobilePhone)
    out.writeStringField("name", value.getName)
    if(value.getRadius != null) out.writeNumberField("radius", value.getRadius)
    if(value.getSalary != null) out.writeNumberField("salary", value.getSalary)
    writeSetString("strings", out, value.getStrings)
    out.writeNumberField("temperature", value.getTemperature)
    writeSetZonedDateTime("times", out, value.getTimes)
    out.writeStringField("type", value.getType.name())
    out.writeNumberField("weight", value.getWeight)
    out.writeStringField("workPage", value.getWorkPage.toExternalForm)
    out.writeStringField("workZip", value.getWorkZip)
  }

  override def read(in: JsonParser, value: KitchenSink): KitchenSink = {
    while(in.nextToken() != END_OBJECT) {
      val fldName = in.getCurrentName
      if(fldName != null) {
        in.nextToken()
        fldName match {

          case "altered" =>
            value.setAltered(readDttm(in))

          case "amplitude" =>
            value.setAmplitude(in.getLongValue)

          case "bearing" =>
            value.setBearing(in.getIntValue)

          case "bytes" =>
            value.setBytes(readByteArray(in))

          case "choices" =>
            value.setChoices(new org.ebay.datameta.ser.jackson.fasterxml.gen.v1_0_0.MultiSetString(readLongArray(in)))

          case "code" =>
            value.setCode(readText(in))

          case "color" =>
            value.setColor(BaseColor.forName(readText(in)))

          case "comments" =>
            value.setComments(readText(in))

          case "context" =>
            value.setContext(readText(in))

          case "created" =>
            value.setCreated(readDttm(in))

          case "diameter" =>
            value.setDiameter(in.getFloatValue())

          case "emb" =>
            value.setEmb(EmbeddedType_JSONable.read(in))

          case "embeds" =>
            value.setEmbeds(readList(in, EmbeddedType_JSONable))

          case "embo" =>
            value.setEmbo(Embodiment_JSONable.read(in))

          case "fieldName" =>
            value.setFieldName(in.getIntValue)

          case "frequency" =>
            value.setFrequency(in.getLongValue)

          case "homeEmail" =>
            value.setHomeEmail(readText(in))

          case "homePage" =>
            value.setHomePage(new java.net.URL(readText(in)))

          case "homeZip" =>
            value.setHomeZip(readText(in))

          case "id" =>
            value.setId(in.getLongValue)

          case "idLessNess" =>
            value.setIdLessNess(readSet(in, IdLess_JSONable))

          case "ints" =>
            value.setInts(readLinkedListInteger(in))

          case "isMeasurable" =>
            value.setIsMeasurable(in.getBooleanValue())

          case "isRequired" =>
            value.setIsRequired(in.getBooleanValue())

          case "lastFirstName" =>
            value.setLastFirstName(readText(in))

          case "length" =>
            value.setLength(in.getIntValue)

          case "mobilePhone" =>
            value.setMobilePhone(readText(in))

          case "name" =>
            value.setName(readText(in))

          case "radius" =>
            value.setRadius(in.getDoubleValue())

          case "salary" =>
            value.setSalary(readBigDecimal(in))

          case "strings" =>
            value.setStrings(readSetString(in))

          case "temperature" =>
            value.setTemperature(in.getDoubleValue())

          case "times" =>
            value.setTimes(readSetZonedDateTime(in))

          case "type" =>
            value.setType(WordedEnum.forName(readText(in)))

          case "weight" =>
            value.setWeight(in.getFloatValue())

          case "workPage" =>
            value.setWorkPage(new java.net.URL(readText(in)))

          case "workZip" =>
            value.setWorkZip(readText(in))

          case _ => throw new IllegalArgumentException(s"""Unhandled field "$fldName" """)
        }
      }
    }
    value
  }

  override def read(in: JsonParser): KitchenSink = {
    read(in, new KitchenSink())
  }
}
